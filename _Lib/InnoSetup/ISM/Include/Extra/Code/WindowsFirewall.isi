; Add/remove programs from the windows firewall rules.
; http://www.vincenzo.net/isxkb/index.php?title=Adding_a_rule_to_the_Windows_firewall
; http://news.jrsoftware.org/news/innosetup/msg43799.html

#ifndef __ISM_EXTRA_CODE_WINDOWS_FIREWALL__
#define __ISM_EXTRA_CODE_WINDOWS_FIREWALL__

[Code]

const
  NET_FW_SCOPE_ALL      = 0;
  NET_FW_ACTION_ALLOW   = 1;
  NET_FW_IP_VERSION_ANY = 2;
  NET_FW_RULE_DIR_IN    = 1;
  NET_FW_RULE_DIR_OUT   = 2;

procedure _WindowsFirewall_AddExceptionXP(const AppName, FileName: String);
var
  FirewallObject: Variant;
  FirewallManager: Variant;
  FirewallProfile: Variant;
begin
  try
    FirewallObject := CreateOleObject('HNetCfg.FwAuthorizedApplication');
    FirewallObject.ProcessImageFileName := FileName;
    FirewallObject.Name := AppName;
    FirewallObject.Scope := NET_FW_SCOPE_ALL;
    FirewallObject.IpVersion := NET_FW_IP_VERSION_ANY;
    FirewallObject.Enabled := True;
    FirewallManager := CreateOleObject('HNetCfg.FwMgr');
    FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
    FirewallProfile.AuthorizedApplications.Add(FirewallObject);
  except
  end;
end;

function _WindowsFirewall_GetFwRuleForVista(const AppName, FileName, Grouping: String; IsInbound: Boolean): Variant;
var
  firewallRule: Variant;
begin
    firewallRule := CreateOleObject('HNetCfg.FWRule');
    firewallRule.Action := NET_FW_ACTION_ALLOW;
    firewallRule.Description := AppName;
    firewallRule.ApplicationName := FileName;
    firewallRule.Grouping := Grouping;
    firewallRule.Enabled := True;
    firewallRule.InterfaceTypes := 'All';
    firewallRule.Name := AppName;
    case IsInbound of
      True:   firewallRule.Direction := NET_FW_RULE_DIR_IN;
      False:  firewallRule.Direction := NET_FW_RULE_DIR_OUT;
    end;
    Result := firewallRule;
end;

procedure _WindowsFirewall_AddExceptionVista(const AppName, FileName, Grouping: String);
var
  firewallPolicy: Variant;
begin
try
  firewallPolicy := CreateOleObject('HNetCfg.FwPolicy2');   

  firewallPolicy.Rules.Add(_WindowsFirewall_GetFwRuleForVista(AppName, FileName, Grouping, True));
  firewallPolicy.Rules.Add(_WindowsFirewall_GetFwRuleForVista(AppName, FileName, Grouping, False));
except
end;
end;

function _WindowsFirewall_IsVistaAndAbove: Boolean;
var
  windVer: TWindowsVersion;
begin
  GetWindowsVersionEx(windVer);
  Result := windVer.NTPlatform and (windVer.Major >= 6);
end;

function WindowsFirewall_IsConfigurable: Boolean;
begin
  Result := IsAdminLoggedOn;
end;

procedure WindowsFirewall_RemoveException(const AppName, FileName: String);
var
  firewallManager: Variant;
  firewallProfile: Variant;
  firewallPolicy: Variant;
begin
try
  if not WindowsFirewall_IsConfigurable then Exit;
  
  if _WindowsFirewall_IsVistaAndAbove then
  begin
    firewallPolicy := CreateOleObject('HNetCfg.FwPolicy2');
    firewallPolicy.Rules.Remove(AppName);
    firewallPolicy.Rules.Remove(AppName);
  end
  else
  begin
    firewallManager := CreateOleObject('HNetCfg.FwMgr');
    firewallProfile := firewallManager.LocalPolicy.CurrentProfile;
    fireWallProfile.AuthorizedApplications.Remove(FileName);
  end;
except
end;
end;

procedure WindowsFirewall_AddException(const AppName, FileName, Grouping : String);
begin
  if not WindowsFirewall_IsConfigurable then Exit;
  
  WindowsFirewall_RemoveException(AppName, FileName);

  if _WindowsFirewall_IsVistaAndAbove then
    _WindowsFirewall_AddExceptionVista(AppName, FileName, Grouping)
  else
    _WindowsFirewall_AddExceptionXP(AppName, FileName);
end;

[/Code]

#endif
